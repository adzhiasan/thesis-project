<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add-list-tree" xml:space="preserve">
    <value>(define (get-val tree)
    (car tree))
(define (get-left tree)
    (cadr tree))
(define (get-right tree)
    (caddr tree))
(define (make-tree val left right)
    (list val left right))

(define (add-val-tree val tree)
  (cond ((null? tree) (make-tree val '() '()))
        ((&gt; val (get-val tree)) (make-tree (get-val tree) (get-left tree) (add-val-tree val (get-right tree))))
        ((&lt; val (get-val tree)) (make-tree (get-val tree) (add-val-tree val (get-left tree)) (get-right tree) ))
        ((= val (get-val tree)) tree)))

(define (add-list-tree lst tree)
  (define (addlisttree lst tree)
    (cond ((= (length lst) 1) (add-val-tree (car lst) tree))
        (else (add-val-tree (car lst) (addlisttree (cdr lst) tree)))))
  (addlisttree (reverse lst) tree)
)</value>
    <comment>Двоичные деревья. Вставка элементов списком</comment>
  </data>
  <data name="add-val-tree" xml:space="preserve">
    <value>(define (get-val tree)
    (car tree))
(define (get-left tree)
    (cadr tree))
(define (get-right tree)
    (caddr tree))
(define (make-tree val left right)
    (list val left right))

(define (add-val-tree val tree)
  (cond ((null? tree) (make-tree val '() '()))
        ((&gt; val (get-val tree)) (make-tree (get-val tree) (get-left tree) (add-val-tree val (get-right tree))))
        ((&lt; val (get-val tree)) (make-tree (get-val tree) (add-val-tree val (get-left tree)) (get-right tree) ))
        ((= val (get-val tree)) tree)))</value>
    <comment>Двоичные деревья. Вставка элемента</comment>
  </data>
  <data name="cel-far" xml:space="preserve">
    <value>(define (cel-far temp dir)
  (cond ((= dir 1)
          (* (/ 5 9) (- temp 32.)) )
        ((= dir 2)
          (+ (* (/ 9 5) temp) 32.) )  ) )</value>
    <comment>Цельсии и Фаренгейты</comment>
  </data>
  <data name="getNlist" xml:space="preserve">
    <value>(define (getNlist n)
  (define (getl n lis)
    (cond ((= n 0) '())
          (else (cons lis (getl (- n 1) lis))) ) )
  (getl n '())
)</value>
    <comment>Пустой список заданной длины</comment>
  </data>
  <data name="in-predicate" xml:space="preserve">
    <value>(define (in-predicate? a lis) 
     (cond 
        ((null? lis) #f) 
        ((= a (car lis)) #t) 
        (else (in-predicate? a (cdr lis))) 
     ) 
)</value>
    <comment>Принадлежность элемента множеству</comment>
  </data>
  <data name="leaf-tree" xml:space="preserve">
    <value>(define (get-val tree)
    (car tree))
(define (get-left tree)
    (cadr tree))
(define (get-right tree)
    (caddr tree))
(define (make-tree val left right)
    (list val left right))

(define (add-val-tree val tree)
  (cond ((null? tree) (make-tree val '() '()))
        ((&gt; val (get-val tree)) (make-tree (get-val tree) (get-left tree) (add-val-tree val (get-right tree))))
        ((&lt; val (get-val tree)) (make-tree (get-val tree) (add-val-tree val (get-left tree)) (get-right tree) ))
        ((= val (get-val tree)) tree)))

(define (add-list-tree lst tree)
  (define (addlisttree lst tree)
    (cond ((= (length lst) 1) (add-val-tree (car lst) tree))
        (else (add-val-tree (car lst) (addlisttree (cdr lst) tree)))))
  (addlisttree (reverse lst) tree)
)

(define (leaf-tree tree)
  (cond ((and (null? (get-left tree)) (null? (get-right tree))) 1)
        (else (+ (leaf-tree (get-left tree)) (leaf-tree (get-right tree)))))
)</value>
    <comment>Двоичные деревья. Количество листьев</comment>
  </data>
  <data name="sci" xml:space="preserve">
    <value>(define (sci n pow)
  (* n (expt 10 pow)))</value>
    <comment>Экспоненциальная запись</comment>
  </data>
  <data name="sumItems" xml:space="preserve">
    <value>(define (sumItems lis)
  (if (null? lis) 
      0
      (+ (car lis) (sumItems (cdr lis)))
  )
)</value>
    <comment>Сумма элементов списка</comment>
  </data>
  <data name="tip" xml:space="preserve">
    <value>(define (tip bill)
  (- (ceiling (+ bill (* bill 0.15))) bill))</value>
    <comment>Сколько чаевых</comment>
  </data>
  <data name="union" xml:space="preserve">
    <value>(define (in-predicate? a lis) 
     (cond 
        ((null? lis) #f) 
        ((= a (car lis)) #t) 
        (else (in-predicate? a (cdr lis))) 
     ) 
)

(define (union a b)
    (cond 
        ((null? a) b)
        ((null? b) a)
        ((in-predicate? (car a) b) (union (cdr a) b) )
        (else (cons (car a) (union (cdr a) b)))
    )
)</value>
    <comment>Объединение множеств</comment>
  </data>
  <data name="valid-date" xml:space="preserve">
    <value>(define (valid-date? d m y)
  (cond ((or (&lt; d 1) (&lt; m 1) (&lt; y 1)) #f)
        ((or (&gt; d 31) (&gt; m 12)) #f)
        ((and (= d 31) (or (= m 2) (= m 4) (= m 6) (= m 9) (= m 11))) #f)
        ((and (= d 30) (= m 2)) #f)
        ((and (= d 29) (= m 2) (&gt; (modulo y 4) 0)) #f)
        ((and (= d 29) (= m 2) (and (= (modulo y 100) 0) (&gt; (modulo y 400) 0))) #f)
        (else #t)))</value>
    <comment>Проверка даты</comment>
  </data>
</root>